#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var https = require('https');
var config = require('../config');
var log = require('../libs/log')(module);
var fs = require('fs');


/**
 * Get port from environment and store in Express.
 */

var port = config.get('port');
var credentials = {
  key: fs.readFileSync(config.get('apiServerAuth:privateKey')).toString(),
  cert:  fs.readFileSync(config.get('apiServerAuth:publicKey')).toString()
};


/**
 * Create HTTP server.
 */

var server = https.createServer(credentials, app);






/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "127.0.0.1");
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io')(server);

require('../socket')(io);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    console.log("Сервер запущен, текущая версия: " + config.get("general:version"));
}

